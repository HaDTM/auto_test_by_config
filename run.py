import json
import time
import os
import argparse
from dotenv import load_dotenv

from bank_adapter_factory import BankAdapterFactory
from utils.driver_init import ensure_app_installed, init_driver, grant_post_notification_permission
from utils.device_utils import uninstall_app, is_app_installed, launch_app_once, restart_app

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
load_dotenv()
BANK_NAME = os.getenv("BANK_NAME")
USER_ID = os.getenv("USER_ID")
LOOP_COUNT = int(os.getenv("LOOP_COUNT", "1"))  # Default = 1 n·∫øu ch∆∞a set
DEVICE_NAME = os.getenv("DEVICE_NAME")

if not DEVICE_NAME or not BANK_NAME or not USER_ID:
    raise ValueError("‚ùå Thi·∫øu gi√° tr·ªã 'DEVICE_NAME' ho·∫∑c 'APP_ACTIVITY' ho·∫∑c 'BANK_NAME' ho·∫∑c 'USER_ID' trong file .env!")

def load_config(bank_name):
    config_path = f"configs/{bank_name.lower()}_config.json"
    with open(config_path, "r", encoding="utf-8") as f:
        config = json.load(f)
    config["bank_name"] = bank_name

    # Ghi ƒë√® gi√° tr·ªã t·ª´ .env v√†o c·∫•u h√¨nh
    config["desired_caps"]["deviceName"] = DEVICE_NAME
    print(f"[INFO] ƒê√£ ghi ƒë√® deviceName: {DEVICE_NAME}")
    print(f"[INFO] appActivity: {config['desired_caps']['appActivity']}")

    return config

def prepare_driver(config, flow):
    package_name = config["desired_caps"]["appPackage"]

    # Ch·ªâ g·ª° c√†i ƒë·∫∑t ·ª©ng d·ª•ng n·∫øu lu·ªìng l√† "update" ho·∫∑c "register"
    if flow in ["update", "register"]:
        if is_app_installed(package_name):
            uninstall_app(package_name)
            print(f"[INFO] ƒê√£ g·ª° c√†i ƒë·∫∑t ·ª©ng d·ª•ng: {package_name}")

    # C√†i ƒë·∫∑t ·ª©ng d·ª•ng t√πy theo lu·ªìng ki·ªÉm th·ª≠
    if flow == "update":
        ensure_app_installed(config["apk_v1_path"], package_name)
        print(f"[INFO] ƒê√£ c√†i ƒë·∫∑t ·ª©ng d·ª•ng phi√™n b·∫£n 1 t·ª´: {config['apk_v1_path']}")
    elif flow in ["register", "login", "adduser"]:
        ensure_app_installed(config["apk_v2_path"], package_name)
        print(f"[INFO] ƒê√£ c√†i ƒë·∫∑t ·ª©ng d·ª•ng phi√™n b·∫£n 2 t·ª´: {config['apk_v2_path']}")

    # M·ªü ·ª©ng d·ª•ng l·∫ßn ƒë·∫ßu
    launch_app_once(package_name)

    # Kh·ªüi t·∫°o driver
    return init_driver(config["desired_caps"], config["timeout"])

def main():
    # Parse tham s·ªë t·ª´ command line
    parser = argparse.ArgumentParser()
    parser.add_argument("--flow", required=True, choices=["login", "register", "update", "adduser"])
    parser.add_argument("--apk_v2_path", required=False)
    args = parser.parse_args()

    config = load_config(BANK_NAME)

    for i in range(LOOP_COUNT):
        print(f"\nüîÅ [{BANK_NAME}] L·∫ßn ch·∫°y th·ª© {i+1} ({args.flow})")

        # Chu·∫©n b·ªã driver v√† c√†i ƒë·∫∑t ·ª©ng d·ª•ng theo lu·ªìng ki·ªÉm th·ª≠
        driver = prepare_driver(config, args.flow)
        config["driver"] = driver

        package_name = config["desired_caps"]["appPackage"]
        grant_post_notification_permission(package_name)

        # Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng n·∫øu c·∫ßn (ch·ªâ √°p d·ª•ng cho lu·ªìng login)
        if args.flow == "login":
            restart_app(driver, package_name)
            print(f"[INFO] ƒê√£ kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng: {package_name}")

        adapter = BankAdapterFactory.create_adapter(BANK_NAME, config)

        # Ch·ªçn lu·ªìng theo tham s·ªë --flow
        if args.flow == "login":
            adapter.dispatch_flow("login", USER_ID)
        elif args.flow == "register":
            adapter.dispatch_flow("register", USER_ID)
        elif args.flow == "update":
            adapter.test_upgrade_flow(USER_ID)
        elif args.flow == "adduser":
            adapter.add_user_flow(USER_ID)

        # G·ª° app sau khi test (ch·ªâ √°p d·ª•ng cho c√°c lu·ªìng c·∫ßn thi·∫øt)
        if args.flow in ["update", "register"] and is_app_installed(package_name):
            uninstall_app(package_name)
            print(f"üóëÔ∏è ƒê√£ g·ª° c√†i ƒë·∫∑t ·ª©ng d·ª•ng: {package_name}")
        else:
            print(f"‚ÑπÔ∏è Kh√¥ng c·∫ßn g·ª° ·ª©ng d·ª•ng trong lu·ªìng '{args.flow}'.")

        # ƒê·∫£m b·∫£o ·ª©ng d·ª•ng ƒë∆∞·ª£c t·∫Øt ho√†n to√†n sau m·ªói l·∫ßn ch·∫°y
        if driver:
            try:
                driver.terminate_app(package_name)  # T·∫Øt ·ª©ng d·ª•ng
                print(f"[INFO] ƒê√£ t·∫Øt ·ª©ng d·ª•ng: {package_name}")
            except Exception as e:
                print(f"[WARNING] Kh√¥ng th·ªÉ t·∫Øt ·ª©ng d·ª•ng: {e}")

        driver.quit()

if __name__ == "__main__":
    main()