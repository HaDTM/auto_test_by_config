import os
from appium import webdriver
from appium.options.android import UiAutomator2Options
from selenium.webdriver.support.ui import WebDriverWait
import subprocess

def ensure_app_installed(apk_path, package_name):
    result = os.popen("adb shell pm list packages").read()
    if package_name not in result:
        print(f"[INFO] App ch∆∞a c√†i. Ti·∫øn h√†nh c√†i l·∫°i t·ª´: {apk_path}")
        os.system(f"adb install {apk_path}")
    else:
        print(f"[INFO] App ƒë√£ c√†i s·∫µn: {package_name}")

#C√°i n√†y ƒë·ªÉ sau n√†y m√¨nh vi·∫øt nh√©, gi·ªù m√¨nh l∆∞·ªùi l·∫Øm.
def get_connected_device_info():
    # L·∫•y danh s√°ch thi·∫øt b·ªã
    result = subprocess.run(["adb", "devices"], capture_output=True, text=True)
    lines = result.stdout.strip().splitlines()
    devices = [line.split()[0] for line in lines[1:] if "device" in line]

    if not devices:
        print("‚ùå Kh√¥ng c√≥ thi·∫øt b·ªã n√†o ƒëang k·∫øt n·ªëi.")
        return None

    device_id = devices[0]  # L·∫•y thi·∫øt b·ªã ƒë·∫ßu ti√™n
    def get_prop(prop):
        res = subprocess.run(
            ["adb", "-s", device_id, "shell", "getprop", prop],
            capture_output=True, text=True
        )
        return res.stdout.strip()

    info = {
        "device_id": device_id,
        "model": get_prop("ro.product.model"),
        "manufacturer": get_prop("ro.product.manufacturer"),
        "android_version": get_prop("ro.build.version.release"),
        "sdk": get_prop("ro.build.version.sdk")
    }

    print(f"üì± Thi·∫øt b·ªã ƒëang k·∫øt n·ªëi: {info}")
    return info

def grant_post_notification_permission(package_name):
    # L·∫•y SDK version
    result = subprocess.run(
        ["adb", "shell", "getprop", "ro.build.version.sdk"],
        capture_output=True, text=True
    )
    sdk_version = int(result.stdout.strip())

    # N·∫øu Android 13 tr·ªü l√™n (SDK >= 33), th√¨ c·∫•p quy·ªÅn
    if sdk_version >= 33:
        subprocess.run([
            "adb", "shell", "pm", "grant",
            package_name, "android.permission.POST_NOTIFICATIONS"
        ])
        print(f"‚úÖ ƒê√£ c·∫•p quy·ªÅn POST_NOTIFICATIONS cho {package_name}")
    else:
        print(f"‚ÑπÔ∏è Thi·∫øt b·ªã Android {sdk_version} kh√¥ng c·∫ßn quy·ªÅn POST_NOTIFICATIONS")

def init_driver(desired_caps, timeout):
    options = UiAutomator2Options()
    for key, value in desired_caps.items():
        options.set_capability(key, value)

    driver = webdriver.Remote("http://localhost:4723", options=options)
     # üëá In ra activity hi·ªán t·∫°i sau khi app ƒë∆∞·ª£c m·ªü
    print("[DEBUG] Activity ƒëang d√πng:", driver.current_activity)
    driver.implicitly_wait(timeout)
    return driver
